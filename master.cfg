# -*- python -*-
# ex: set syntax=python:

visus_url="git@github.com:sci-visus/visus.git"
visusBranches=['develop','scrgiorgio','cchriste']

# NOTE: Please do not commit username/passwords
#       auth.txt must be provided, containing "[('username','password')]" to be used for buildbot web service access.

# This is the dictionary that the buildmaster pays attention to.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

# to find out system information from command line...
# in linux: lsb_release -a
#           uname -mrs
#           gcc --version
# in osx:   uname -mrs
#           xcodebuild -version
#           gcc --version
#           sw_vers
# in windows: use GUI

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("atlanta"  ,"vslave",max_builds=4), #suse-11.3-x86_64-gcc4.5.0
               BuildSlave("visuswin" ,"vslave",max_builds=4), #windows7pro-sp1-x64-VS2010U
               BuildSlave("romulus"  ,"vslave",max_builds=4), #CentOS-6.5-x86_64-gcc4.4.7
               BuildSlave("visusmac" ,"vslave",max_builds=2), #darwin-13.1.0-Xcode5.1.1
               BuildSlave("jupiter"  ,"vslave",max_builds=4), #darwin-13.1.0-Xcode5.1.1
               ]
linuxBuilders=["atlanta","romulus"]
winBuilders=["visuswin"]
osxBuilders=["visusmac","jupiter"]

# 'port' must match the value configured into the buildslaves (with their --master option)
c['protocols'] = {'pb': {'port': 9990}}


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(repourl=visus_url,
                                    branches=visusBranches,
                                    workdir='gitpoller_visus',
                                    project='visus',
                                    pollinterval=30))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

####### builderNames
builderNames=["visus-linux64",
              "visus-win64",
              "visus-win32",
              "visus-osx",
              "visus-ios",
              ]

#Default options: take care when changing these because they are modified below per builder.
visusChoiceOpts={"BUILD_TYPE":"Release",
                 "LINK_TYPE" :"static"
}
visusChoiceOptsChoices={"BUILD_TYPE":["Debug","Release"],
                        "LINK_TYPE" :["shared","static"]
}
visusIntOpts={"TESTING_TIME":30,
}
visusBoolOpts={"FAST_BUILD"              :False, #NOTE: doesn't work on Windows due to git co scheme (fresh)
               "VISUS_BUILD_MODVISUS"    :True,
               "VISUS_BUILD_SWIG_PYTHON" :True,
               "VISUS_GUI"               :True,
               "VISUS_SLAM"              :True,
               "VISUS_ZEROMQ"            :True
}
commands=["configuring",
          "building",
# ,                                <ctc> new visus, build up to testing, packaging, deployment
#           "internal testing",
           "packaging"]
#           "external testing"
# ]
defaultCommands={commands[0] : ["./buildbot/configure.sh"],
                 commands[1] : ["./buildbot/build.sh"],
# ,
#                  commands[2] : ["./buildbot/test.sh"],
                  commands[2] : ["./buildbot/package.sh"]}
#                  commands[4] : ["./buildbot/test_external_app.sh"]
# }
visusBasicOpts={"enabled"  :True,
                "PLATFORM" :"win",
                "BITNESS"  :"64",
                "commands" :defaultCommands,
                "builders" :[],
                "branch"   :"",
                "shell"    :["bash"],
                "HOME"     :"",
                "VISUS_PATH" :"./cmake_build/visus/"
}

visusForceOpts=visusChoiceOpts.keys()+visusIntOpts.keys()+visusBoolOpts.keys()+visusBasicOpts.keys()
visusAllOpts  =visusBasicOpts.keys()+visusForceOpts

defaultBuilderOpts={key:value for key,value in visusBasicOpts.iteritems()}
defaultBuilderOpts.update({key:value for key,value in visusChoiceOpts.iteritems()})
defaultBuilderOpts.update({key:value for key,value in visusIntOpts.iteritems()})
defaultBuilderOpts.update({key:value for key,value in visusBoolOpts.iteritems()})

#Per-builder default options
builderOpts={}
builderOpts={name: dict(defaultBuilderOpts) for name in builderNames}

#Per-builder override defaults
name="visus-linux64"
builderOpts[name]["PLATFORM"]                   ="linux"
builderOpts[name]["builders"]                   =linuxBuilders
builderOpts[name]["FAST_BUILD"]                 =True

name="visus-osx"
builderOpts[name]["PLATFORM"]                   ="osx"
builderOpts[name]["builders"]                   =osxBuilders
builderOpts[name]["FAST_BUILD"]                 =True

name="visus-ios"
builderOpts[name]["PLATFORM"]                   ="ios"
builderOpts[name]["builders"]                   =osxBuilders
builderOpts[name]["FAST_BUILD"]                 =True

name="visus-win64"
builderOpts[name]["builders"]                   =winBuilders
builderOpts[name]["shell"]                      =["cmd","/c",".\\buildbot\\win_cmd.bat"]
builderOpts[name]["HOME"]                       ="/c/Users/buildbot"

name="visus-win32"
builderOpts[name].update(builderOpts["visus-win64"])
builderOpts[name]["BITNESS"]                    ="32"


####### Factories

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig
from buildbot.steps.source.git import Git
from buildbot.process.properties import Interpolate, Properties, Property

factories={}
for name in builderNames:
    factories[name]=BuildFactory()

# Source checkout functions
repo_url=Interpolate('%(src::repository:~' + visus_url +')s')
visus_git_co=Git(repourl=repo_url,
                 #mode='full',      
                 #method='clobber',
                 mode='incremental',
                 shallow=True,
                 progress=True,
                 clobberOnFailure=True,
                 haltOnFailure=True)
visus_git_co_windows=Git(repourl=repo_url,
                 mode='full',      
                 method='fresh',
                 progress=True,
                 clobberOnFailure=True,
                 haltOnFailure=True)
for name in builderNames:
    if name.startswith("visus-win"):
        factories[name].addStep(visus_git_co_windows)
    else:
        factories[name].addStep(visus_git_co)

#addFactoryStep() convenience function
def addFactoryStep(factory,cmd,env,desc):
    factory.addStep(ShellCommand(command=cmd,haltOnFailure=True,description=desc,env=env,descriptionDone=desc))


c['builders'] = []

for builderName in builderNames:
    builderDefaults=builderOpts[builderName]
    if not builderDefaults["enabled"]:
        continue;

    #parameters must be strings, so "interpolate" ints and bools
    opts={name:Interpolate('%s',Property(name)) for name in visusForceOpts}
    opts.update({key:builderDefaults[key] for key in visusBasicOpts.keys()})
    opts["branch"]=Property('branch')
    opts["commands"]=""  #To prevent: exceptions.RuntimeError: 'env' values must be strings or lists; key 'commands' is incorrect
    opts["enabled"]=""   #To prevent: exceptions.RuntimeError: 'env' values must be strings or lists; key 'enabled' is incorrect

    #If user hasn't overridden, use defaults
    for k,v in builderDefaults.iteritems():
        if opts[k]==None:
            opts[k]=v

    for step in commands:
        addFactoryStep(factories[builderName],cmd=builderDefaults["shell"]+builderDefaults["commands"][step],env=opts,desc=step)

    # Set Factories for Builders
    c['builders'].append(BuilderConfig(name=builderName,slavenames=builderDefaults["builders"],factory=factories[builderName]))




####### SCHEDULERS

# Schedulers decide how to react to incoming changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import *
from buildbot.changes import filter

excludes = ["README*"]#, "docs", "resources"]#, "buildbot"]

# isImportant() checks if this revision is interesting enough to trigger the builds.
def isImportant(change):
    if not excludes:
        return True
    for file in change.files:
        for pattern in excludes:
            match = re.match(pattern, file)
            if match:
                return False
    return True


#automatic schedulers, one per build configuration in order to provide defaults (properties) per builder
treeStableTime=120
c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
        name="visus-scheduler-linux64",
        change_filter=filter.ChangeFilter(project='visus',branch=visusBranches),
        treeStableTimer=treeStableTime,
        fileIsImportant=isImportant,
        builderNames=["visus-linux64"],
        properties=builderOpts["visus-linux64"]
        ))
c['schedulers'].append(AnyBranchScheduler(
        name="visus-scheduler-win32",
        change_filter=filter.ChangeFilter(project='visus',branch=visusBranches),
        treeStableTimer=treeStableTime,
        fileIsImportant=isImportant,
        builderNames=["visus-win32"],
        properties=builderOpts["visus-win32"]
        ))
c['schedulers'].append(AnyBranchScheduler(
        name="visus-scheduler-win64",
        change_filter=filter.ChangeFilter(project='visus',branch=visusBranches),
        treeStableTimer=treeStableTime,
        fileIsImportant=isImportant,
        builderNames=["visus-win64"],
        properties=builderOpts["visus-win64"]
        ))
c['schedulers'].append(AnyBranchScheduler(
        name="visus-scheduler-osx",
        change_filter=filter.ChangeFilter(project='visus',branch=visusBranches),
        treeStableTimer=treeStableTime,
        fileIsImportant=isImportant,
        builderNames=["visus-osx"],
        properties=builderOpts["visus-osx"]
        ))
c['schedulers'].append(AnyBranchScheduler(
        name="visus-scheduler-ios",
        change_filter=filter.ChangeFilter(project='visus',branch=visusBranches),
        treeStableTimer=treeStableTime,
        fileIsImportant=isImportant,
        builderNames=["visus-ios"],
        properties=builderOpts["visus-ios"]
        ))

#force scheduler, used to manually start builds from web
visusForceSchedulerOpts= \
                         [BooleanParameter      (name=key,label=key,default=False)                           for key,value in visusBoolOpts.iteritems()] + \
                         [IntParameter          (name=key,label=key,default=value)                           for key,value in visusIntOpts.iteritems()] + \
                         [ChoiceStringParameter (name=key,choices=visusChoiceOptsChoices[key],default=value) for key,value in visusChoiceOpts.iteritems()]
c['schedulers'].append(ForceScheduler(
        name="force",
        builderNames=builderNames,
        properties=visusForceSchedulerOpts
        ))


######### MailNotification
from buildbot.status.mail import MailNotifier
from buildbot.status.builder import Results
import slack

def messageFormatter(mode, name, build, results, master_status):
    result = Results[results]

    text = list()
    text.append("STATUS: %s" % result.title())
    return {
        'body' : "\n".join(text),
        'type' : 'plain'
    }

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz,auth

# Read username and password from local file auth.txt rather than commit a password to a public git repo :)
from ast import literal_eval
authfile=open("auth.txt")
if not authfile:
    print("WARNING: You must provide auth.txt containing \"[('username','password')]\" to enable login to web service!")
else:
    lines=authfile.readlines()
    userauth=literal_eval(lines[0])

authz_cfg=authz.Authz(
    auth=auth.BasicAuth(userauth),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8011, authz=authz_cfg))

c['status'].append(MailNotifier(fromaddr="visusbuildbot@gmail.com",
                                sendToInterestedUsers=True,
                                extraRecipients=['visusbuilds@sci.utah.edu'],
                                subject='ViSUS Buildbot Failure',
                                relayhost="mail.sci.utah.edu",
                                mode='failing'
                                ))

c['status'].append(slack.SlackStatusPush(weburl='https://hooks.slack.com/services/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',notify_on_success=False))

# c['status'].append(MailNotifier(fromaddr="visusbuildbot@gmail.com",
#                                 sendToInterestedUsers=True,
#                                 extraRecipients=['cam@sci.utah.edu','mliu@sci.utah.edu'],
#                                 subject='ViSUS Buildbot Status (ALL MESSAGES)',
#                                 buildSetSummary=True,
#                                 relayhost="mail.sci.utah.edu",
#                                 ))


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ViSUS"
c['titleURL'] = "http://atlanta.sci.utah.edu"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://atlanta.sci.utah.edu:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

####### OTHER

c['buildHorizon'] = 8
c['logHorizon'] = 8
c['logCompressionLimit'] = 1024*1024
c['logCompressionMethod'] = 'bz2'
c['logMaxSize'] = 1024*1024*32 # 32 Megabytes
