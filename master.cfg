# -*- python -*-
# ex: set syntax=python:

visus_url="git@github.com:sci-visus/nvisusio.git"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

# to find out system information from command line...
# in linux: lsb_release -a
#           uname -mrs
#           gcc --version
# in osx:   uname -mrs
#           xcodebuild -version
#           gcc --version
# in windows: use GUI

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("atlanta" ,"vslave",max_builds=8), #suse-11.3-x86_64-gcc4.5.0
               BuildSlave("visusmac" ,"vslave",max_builds=1), #darwin-10.6.8-Xcode4.2
               #BuildSlave("jupiter"  ,"vslave",max_builds=2), #Darwin 11.4.2-llvm-gcc4.2.1-Xcode4.6.3
               BuildSlave("visuswin" ,"vslave",max_builds=4), #windows7pro-sp1-x64-VS2010U
               ]
# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(repourl=visus_url,
                                    branches=['develop','master'],
                                    workdir='gitpoller_visus',
                                    project='visus',
                                    pollinterval=600))



####### builderNames
builderNames=["visus-linux64-juce",
              "visus-linux64-qt",
              #"visus-win64-qt-ogl",     #64-bit Qt is currently unsupported for version 4.8
              "visus-win32-qt-ogl",
              "visus-win64-juce-ogl",
              "visus-win32-juce-ogl",
              #"visus-win64-qt-dx",      #unsupported until qt 5.1 (we currently use qt 4.8)
              #"visus-win32-qt-dx",      #unsupported until qt 5.1 (we currently use qt 4.8)
              "visus-win64-juce-dx",
              "visus-win32-juce-dx",
              "visus-osx-juce",
              "visus-osx-qt",
              "visus-ios",
              ]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import *
from buildbot.process.properties import Properties, Property
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
        name="visus-scheduler",
        change_filter=filter.ChangeFilter(project='visus',branch=['master','develop']),
        treeStableTimer=300,
        #fileIsImportant=... function to check if file should trigger a build
        builderNames=builderNames,
        ))

buildtype=ChoiceStringParameter(name="build_type", choices=["Debug","Release"], default="Release")

c['schedulers'].append(ForceScheduler(
        name="force",
        builderNames=builderNames,
        properties=[
            buildtype
        ]
        ))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
# Note: buildbot doesn't seem to handle anything but very simple commands, so most commands are scripts.

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand

factories={}
for name in builderNames:
    factories[name]=BuildFactory()

# check out the source
from buildbot.steps.source.git import Git
from buildbot.process.properties import Interpolate
repo_url=Interpolate('%(src::repository:~' + visus_url +')s')
visus_git_co=Git(repourl=repo_url,
                 mode='full',
                 method='fresh',
                 shallow=True,
                 progress=True,
                 clobberOnFailure=True,
                 haltOnFailure=True)
for name in builderNames:
    factories[name].addStep(visus_git_co)

def addFactoryStep(factory,cmd,env,desc):
    factory.addStep(ShellCommand(command=cmd,haltOnFailure=True,description=desc,env=env,descriptionDone=desc))

# configure
addFactoryStep(factories["visus-linux64-qt"]    ,["bash","./buildbot/linux/configure.sh","qt"],{"BUILD_TYPE":Property("build_type"),"REN2D":"qt"},"configuring")
addFactoryStep(factories["visus-linux64-juce"]  ,["bash","./buildbot/linux/configure.sh","juce"],{"BUILD_TYPE":Property("build_type"),"REN2D":"juce"},"configuring")
addFactoryStep(factories["visus-osx-qt"]        ,["bash","./buildbot/osx/configure.sh","qt"],{"REN2D":"qt"},"configuring")
addFactoryStep(factories["visus-osx-juce"]      ,["bash","./buildbot/osx/configure.sh","juce"],{"REN2D":"juce"},"configuring")
addFactoryStep(factories["visus-ios"]           ,["bash","./buildbot/ios/configure.sh"],{},"configuring")
addFactoryStep(factories["visus-win32-qt-ogl"]  ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/configure.sh"],{"BUILD_TYPE":Property("build_type"),"BITNESS":"32","REN2D":"qt","REN3D":"opengl"}   ,"configuring")
addFactoryStep(factories["visus-win32-juce-ogl"],["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/configure.sh"],{"BUILD_TYPE":Property("build_type"),"BITNESS":"32","REN2D":"juce","REN3D":"opengl"} ,"configuring")
#addFactoryStep(factories["visus-win32-qt-dx"]   ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/configure.sh"],{"BUILD_TYPE":Property("build_type"),"BITNESS":"32","REN2D":"qt","REN3D":"directx"}  ,"configuring")
addFactoryStep(factories["visus-win32-juce-dx"] ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/configure.sh"],{"BUILD_TYPE":Property("build_type"),"BITNESS":"32","REN2D":"juce","REN3D":"directx"},"configuring")
#addFactoryStep(factories["visus-win64-qt-ogl"]  ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/configure.sh"],{"BUILD_TYPE":Property("build_type"),"BITNESS":"64","REN2D":"qt","REN3D":"opengl"}   ,"configuring")
addFactoryStep(factories["visus-win64-juce-ogl"],["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/configure.sh"],{"BUILD_TYPE":Property("build_type"),"BITNESS":"64","REN2D":"juce","REN3D":"opengl"} ,"configuring")
#addFactoryStep(factories["visus-win64-qt-dx"]   ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/configure.sh"],{"BUILD_TYPE":Property("build_type"),"BITNESS":"64","REN2D":"qt","REN3D":"directx"}  ,"configuring")
addFactoryStep(factories["visus-win64-juce-dx"] ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/configure.sh"],{"BUILD_TYPE":Property("build_type"),"BITNESS":"64","REN2D":"juce","REN3D":"directx"},"configuring")

# build
addFactoryStep(factories["visus-linux64-qt"]    ,["bash","./buildbot/linux/build.sh"],{},"building")
addFactoryStep(factories["visus-linux64-juce"]  ,["bash","./buildbot/linux/build.sh"],{},"building")
addFactoryStep(factories["visus-osx-qt"]        ,["bash","./buildbot/osx/build.sh"],{"BUILD_TYPE":Property("build_type")},"building")
addFactoryStep(factories["visus-osx-juce"]      ,["bash","./buildbot/osx/build.sh"],{"BUILD_TYPE":Property("build_type")},"building")
addFactoryStep(factories["visus-ios"]           ,["bash","./buildbot/ios/build.sh"],{"BUILD_TYPE":Property("build_type")},"building")
addFactoryStep(factories["visus-win32-qt-ogl"]  ,["cmd","/c",".\\buildbot\\win\\build.bat"],{"BUILD_TYPE":Property("build_type")},"building")
addFactoryStep(factories["visus-win32-juce-ogl"],["cmd","/c",".\\buildbot\\win\\build.bat"],{"BUILD_TYPE":Property("build_type")},"building")
#addFactoryStep(factories["visus-win32-qt-dx"]   ,["cmd","/c",".\\buildbot\\win\\build.bat"],{"BUILD_TYPE":Property("build_type")},"building")
addFactoryStep(factories["visus-win32-juce-dx"] ,["cmd","/c",".\\buildbot\\win\\build.bat"],{"BUILD_TYPE":Property("build_type")},"building")
#addFactoryStep(factories["visus-win64-qt-ogl"]  ,["cmd","/c",".\\buildbot\\win\\build.bat"],{"BUILD_TYPE":Property("build_type")},"building")
addFactoryStep(factories["visus-win64-juce-ogl"],["cmd","/c",".\\buildbot\\win\\build.bat"],{"BUILD_TYPE":Property("build_type")},"building")
#addFactoryStep(factories["visus-win64-qt-dx"]   ,["cmd","/c",".\\buildbot\\win\\build.bat"],{"BUILD_TYPE":Property("build_type")},"building")
addFactoryStep(factories["visus-win64-juce-dx"] ,["cmd","/c",".\\buildbot\\win\\build.bat"],{"BUILD_TYPE":Property("build_type")},"building")

# test
addFactoryStep(factories["visus-linux64-qt"]    ,["bash","./buildbot/linux/test.sh"],{},"testing")
addFactoryStep(factories["visus-linux64-juce"]  ,["bash","./buildbot/linux/test.sh"],{},"testing")
addFactoryStep(factories["visus-osx-qt"]        ,["bash","./buildbot/osx/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing") 
addFactoryStep(factories["visus-osx-juce"]      ,["bash","./buildbot/osx/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")
addFactoryStep(factories["visus-ios"]           ,["bash","./buildbot/ios/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")                  # for iOS need to run the iOS simulator which has apparently been done by the internet.
addFactoryStep(factories["visus-win32-qt-ogl"]  ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")
addFactoryStep(factories["visus-win32-juce-ogl"],["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")
#addFactoryStep(factories["visus-win32-qt-dx"]   ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")
addFactoryStep(factories["visus-win32-juce-dx"] ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")
#addFactoryStep(factories["visus-win64-qt-ogl"]  ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")
addFactoryStep(factories["visus-win64-juce-ogl"],["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")
#addFactoryStep(factories["visus-win64-qt-dx"]   ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")
addFactoryStep(factories["visus-win64-juce-dx"] ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/test.sh"],{"BUILD_TYPE":Property("build_type")},"testing")

# package
#NOTE: we could add a filter so user forks aren't packaged (use doStepIf=Filter...), but maybe user's want their builds packaged and the naming scheme will still work without conflicts.
addFactoryStep(factories["visus-linux64-qt"]    ,["bash","./buildbot/linux/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
addFactoryStep(factories["visus-linux64-juce"]  ,["bash","./buildbot/linux/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
#addFactoryStep(factories["visus-osx-qt"]        ,["bash","./buildbot/osx/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
#addFactoryStep(factories["visus-osx-juce"]      ,["bash","./buildbot/osx/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
#addFactoryStep(factories["visus-ios"]           ,["bash","./buildbot/ios/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
# addFactoryStep(factories["visus-win32-qt-ogl"]  ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
# addFactoryStep(factories["visus-win32-juce-ogl"],["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
# addFactoryStep(factories["visus-win32-qt-dx"]   ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
# addFactoryStep(factories["visus-win32-juce-dx"] ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
# addFactoryStep(factories["visus-win64-qt-ogl"]  ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
# addFactoryStep(factories["visus-win64-juce-ogl"],["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
# addFactoryStep(factories["visus-win64-qt-dx"]   ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")
# addFactoryStep(factories["visus-win64-juce-dx"] ,["c:\\progra~2\\Git\\bin\\bash.exe","-login","-c","./buildbot/win/package.sh"],{"BUILD_TYPE":Property("build_type")},"packaging")


######### Set Factories for Builders

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(BuilderConfig(name="visus-linux64-qt"    ,slavenames=["atlanta"]          ,factory=factories["visus-linux64-qt"]))
c['builders'].append(BuilderConfig(name="visus-linux64-juce"  ,slavenames=["atlanta"]          ,factory=factories["visus-linux64-juce"]))
c['builders'].append(BuilderConfig(name="visus-osx-qt"        ,slavenames=["visusmac"]         ,factory=factories["visus-osx-qt"]))
c['builders'].append(BuilderConfig(name="visus-osx-juce"      ,slavenames=["visusmac"],factory=factories["visus-osx-juce"]))
c['builders'].append(BuilderConfig(name="visus-ios"           ,slavenames=["visusmac"],factory=factories["visus-ios"]))
c['builders'].append(BuilderConfig(name="visus-win32-qt-ogl"  ,slavenames=["visuswin"]          ,factory=factories["visus-win32-qt-ogl"]))
c['builders'].append(BuilderConfig(name="visus-win32-juce-ogl",slavenames=["visuswin"]          ,factory=factories["visus-win32-juce-ogl"]))
#c['builders'].append(BuilderConfig(name="visus-win32-qt-dx"   ,slavenames=["visuswin"]          ,factory=factories["visus-win32-qt-dx"]))
c['builders'].append(BuilderConfig(name="visus-win32-juce-dx" ,slavenames=["visuswin"]          ,factory=factories["visus-win32-juce-dx"]))
#c['builders'].append(BuilderConfig(name="visus-win64-qt-ogl"  ,slavenames=["visuswin"]          ,factory=factories["visus-win64-qt-ogl"]))
c['builders'].append(BuilderConfig(name="visus-win64-juce-ogl",slavenames=["visuswin"]          ,factory=factories["visus-win64-juce-ogl"]))
#c['builders'].append(BuilderConfig(name="visus-win64-qt-dx"   ,slavenames=["visuswin"]          ,factory=factories["visus-win64-qt-dx"]))
c['builders'].append(BuilderConfig(name="visus-win64-juce-dx" ,slavenames=["visuswin"]          ,factory=factories["visus-win64-juce-dx"]))


######### MailNotification
from buildbot.status.mail import MailNotifier
from buildbot.status.builder import Results

def messageFormatter(mode, name, build, results, master_status):
    result = Results[results]

    text = list()
    text.append("STATUS: %s" % result.title())
    return {
        'body' : "\n".join(text),
        'type' : 'plain'
    }

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz,auth

authz_cfg=authz.Authz(
    auth=auth.BasicAuth([("visus","pizza")]),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

c['status'].append(MailNotifier(fromaddr="visusbuildbot@gmail.com",
                                sendToInterestedUsers=True,
                                extraRecipients=['visusbuilds@sci.utah.edu'],
                                subject='ViSUS Buildbot Failure',
                                relayhost="mail.sci.utah.edu",
                                mode='failing'
                                ))

# c['status'].append(MailNotifier(fromaddr="visusbuildbot@gmail.com",
#                                 sendToInterestedUsers=True,
#                                 extraRecipients=['cam@sci.utah.edu','mliu@sci.utah.edu'],
#                                 subject='ViSUS Buildbot Status (ALL MESSAGES)',
#                                 buildSetSummary=True,
#                                 relayhost="mail.sci.utah.edu",
#                                 ))


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ViSUS"
c['titleURL'] = "http://atlanta.sci.utah.edu"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://atlanta.sci.utah.edu:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

####### OTHER

c['buildHorizon'] = 8
c['logHorizon'] = 8
c['logCompressionLimit'] = 1024*1024
c['logCompressionMethod'] = 'bz2'
c['logMaxSize'] = 1024*1024*32 # 32 Megabytes
