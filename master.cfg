# -*- python -*-
# ex: set syntax=python:

visus_url="git@github.com:sci-visus/nvisusio.git"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

# to find out system information from command line...
# in linux: lsb_release -a
#           uname -mrs
#           gcc --version
# in osx:   uname -mrs
#           xcodebuild -version
#           gcc --version
#           sw_vers
# in windows: use GUI

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("atlanta"  ,"vslave",max_builds=8), #suse-11.3-x86_64-gcc4.5.0
               BuildSlave("visuswin" ,"vslave",max_builds=4), #windows7pro-sp1-x64-VS2010U
               BuildSlave("romulus"  ,"vslave",max_builds=8), #CentOS-6.5-x86_64-gcc4.4.7
               BuildSlave("visusmac" ,"vslave",max_builds=8), #darwin-13.1.0-Xcode5.1.1
               BuildSlave("jupiter"  ,"vslave",max_builds=8), #darwin-13.1.0-Xcode5.1.1
               ]
# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(repourl=visus_url,
                                    branches=['develop','master','tutorial','microscopy'],
                                    workdir='gitpoller_visus',
                                    project='visus',
                                    pollinterval=600))



####### builderNames
builderNames=["visus-linux64-juce",
              "visus-linux64-qt",
              #"visus-win64-qt-ogl",     #64-bit Qt is currently unsupported for version 4.8
              "visus-win32-qt-ogl",
              "visus-win64-juce-ogl",
              "visus-win32-juce-ogl",
              #"visus-win64-qt-dx",      #unsupported until qt 5.1 (we currently use qt 4.8)
              #"visus-win32-qt-dx",      #unsupported until qt 5.1 (we currently use qt 4.8)
              "visus-win64-juce-dx",
              "visus-win32-juce-dx",
              "visus-osx-juce",
              "visus-osx-qt",
              "visus-ios",
              ]

buildSteps=["configuring","building","internal testing","packaging","external testing"]
defaultCommands={buildSteps[0]:["./buildbot/configure.sh"],
                 buildSteps[1]:["./buildbot/build.sh"],
                 buildSteps[2]:["./buildbot/test.sh"],
                 buildSteps[3]:["./buildbot/package.sh"],
                 buildSteps[4]:["./buildbot/test_external_app.sh"]}

builderOpts={}
defaultBuilderOpts={"platform":"win","bitness":64,"ren2d":"juce","ren3d":"opengl","enabled":False,"commands":defaultCommands,"builders":[]}
builderOpts={name: defaultBuilderOpts for name in builderNames}

builderOpts["visus-linux64-juce"]  ={"platform":"linux","bitness":64,"ren2d":"juce","ren3d":"opengl" ,"enabled":True,"commands":defaultCommands,"builders":["atlanta","romulus"]}
builderOpts["visus-linux64-qt"]    ={"platform":"linux","bitness":64,"ren2d":"qt"  ,"ren3d":"opengl" ,"enabled":True,"commands":defaultCommands,"builders":["atlanta","romulus"]}
builderOpts["visus-osx-juce"]      ={"platform":"osx"  ,"bitness":64,"ren2d":"juce","ren3d":"opengl" ,"enabled":True,"commands":defaultCommands,"builders":["visusmac","jupiter"]}
builderOpts["visus-osx-qt"]        ={"platform":"osx"  ,"bitness":64,"ren2d":"qt"  ,"ren3d":"opengl" ,"enabled":True,"commands":defaultCommands,"builders":["visusmac","jupiter"]}
builderOpts["visus-ios"]           ={"platform":"ios"  ,"bitness":64,"ren2d":"juce","ren3d":"opengl" ,"enabled":True,"commands":defaultCommands,"builders":["visusmac","jupiter"]}
builderOpts["visus-win32-qt-ogl"]  ={"platform":"win"  ,"bitness":32,"ren2d":"qt"  ,"ren3d":"opengl" ,"enabled":True,"commands":defaultCommands,"builders":["visuswin"]}
builderOpts["visus-win32-juce-ogl"]={"platform":"win"  ,"bitness":32,"ren2d":"juce","ren3d":"opengl" ,"enabled":True,"commands":defaultCommands,"builders":["visuswin"]}
builderOpts["visus-win32-juce-dx"] ={"platform":"win"  ,"bitness":32,"ren2d":"juce","ren3d":"directx","enabled":True,"commands":defaultCommands,"builders":["visuswin"]}
builderOpts["visus-win64-juce-ogl"]={"platform":"win"  ,"bitness":64,"ren2d":"juce","ren3d":"opengl" ,"enabled":True,"commands":defaultCommands,"builders":["visuswin"]}
builderOpts["visus-win64-juce-dx"] ={"platform":"win"  ,"bitness":64,"ren2d":"juce","ren3d":"directx","enabled":True,"commands":defaultCommands,"builders":["visuswin"]}
# builderOpts["visus-win32-qt-dx"]   =defaultBuilderOpts
# builderOpts["visus-win64-qt-ogl"]  =defaultBuilderOpts
# builderOpts["visus-win64-qt-dx"]   =defaultBuilderOpts

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import *
from buildbot.process.properties import Properties, Property
from buildbot.changes import filter

excludes = ["README*", "docs", "resources", "buildbot"]

# function checks if this revision is interesting enough to trigger the builds.
def isImportant(change):
    if not excludes:
        return True

    for file in change.files:
        for pattern in excludes:
            match = re.match(pattern, file)
            if match:
                return False

    return True

visusChoiceOpts={"BUILD_TYPE":ChoiceStringParameter(name="BUILD_TYPE",choices=["Debug","Release"], default="Release"),
                 "LINK_TYPE" :ChoiceStringParameter(name="LINK_TYPE", choices=["shared","static"], default="static")
}
visusIntOpts={"BIGINT_NBITS":64,
              "TESTING_TIME":30,
}
visusBoolOpts={"FAST_BUILD":False,              #doesn't work on Windows due to git co scheme (fresh)
               "BUILD_ANNOTATION":True,
               "BUILD_BRIAN_PAINT_AND_CLICK":False,
               "BUILD_DAVIDAPP":False,
               "BUILD_GUITEST":True,
               "BUILD_LIC":True,
               "BUILD_LIDAR":False,             #laslib doesn't build on linux... need a way to specify default per platform. :S
               "BUILD_MERGE_PIDX":True,
               "BUILD_MODVISUS":False,
               "BUILD_MSC":True,
               "BUILD_OLD_VISUSIO":True,
               "BUILD_PLUGIN":False,            #plugin is only for windows (and probably hasn't worked for years)
               "BUILD_SELFTEST":True,
               "BUILD_SIMPLEIO":True,
               "BUILD_TERRAIN":True,
               "BUILD_VISOAR":True,
               "BUILD_VISUSCONVERT":True,
               "BUILD_VISUSSERVER":True,
               "BUILD_VISUSVIEWER":True,
               "BUILD_WEAVING":True,
               "BUILD_CUDA":False,
               "BUILD_DEBUG_RESOURCES":False,
               "BUILD_HDF4":False,
               "BUILD_OPENMP":False,
               "BUILD_SILO":False,
               "BUILD_ZFP":True,
               "BUILD_SWIG_PYTHON":False,
               "BUILD_SWIG_JAVA":False
}
visusForceSchedulerOpts=[BooleanParameter(name=key,label=key,default=value) for key,value in visusBoolOpts.iteritems()] 
visusForceSchedulerOpts.extend([IntParameter(name=key,label=key,default=value) for key,value in visusIntOpts.iteritems()])
visusForceSchedulerOpts.extend([value for value in visusChoiceOpts.values()])
visusAllOpts=visusChoiceOpts.keys()+visusIntOpts.keys()+visusBoolOpts.keys()+["PLATFORM","branch","HOME","REN2D","REN3D","BITNESS"]

visusPlatformBoolOpts={}
visusPlatformBoolOpts["win"]={"FAST_BUILD":False,
               "BUILD_ANNOTATION":True,
               "BUILD_BRIAN_PAINT_AND_CLICK":True,
               "BUILD_DAVIDAPP":False,
               "BUILD_GUITEST":True,
               "BUILD_LIC":True,
               "BUILD_LIDAR":True,
               "BUILD_MERGE_PIDX":True,
               "BUILD_MODVISUS":False,
               "BUILD_MSC":True,
               "BUILD_OLD_VISUSIO":True,
               "BUILD_PLUGIN":True,
               "BUILD_SELFTEST":True,
               "BUILD_SIMPLEIO":True,
               "BUILD_TERRAIN":True,
               "BUILD_VISOAR":True,
               "BUILD_VISUSCONVERT":True,
               "BUILD_VISUSSERVER":True,
               "BUILD_VISUSVIEWER":True,
               "BUILD_WEAVING":True,
               "BUILD_CUDA":True,
               "BUILD_DEBUG_RESOURCES":False,
               "BUILD_HDF4":False,
               "BUILD_OPENMP":True,
               "BUILD_SILO":False,
               "BUILD_ZFP":False,               # fails to build on win32
               "BUILD_SWIG_PYTHON":True,
               "BUILD_SWIG_JAVA":True
}
visusPlatformBoolOpts["osx"]={"FAST_BUILD":False,
               "BUILD_ANNOTATION":True,
               "BUILD_BRIAN_PAINT_AND_CLICK":False,
               "BUILD_DAVIDAPP":False,
               "BUILD_GUITEST":True,
               "BUILD_LIC":True,
               "BUILD_LIDAR":True,
               "BUILD_MERGE_PIDX":True,
               "BUILD_MODVISUS":True,
               "BUILD_MSC":True,
               "BUILD_OLD_VISUSIO":True,
               "BUILD_PLUGIN":False,
               "BUILD_SELFTEST":True,
               "BUILD_SIMPLEIO":True,
               "BUILD_TERRAIN":True,
               "BUILD_VISOAR":True,
               "BUILD_VISUSCONVERT":True,
               "BUILD_VISUSSERVER":True,
               "BUILD_VISUSVIEWER":True,
               "BUILD_WEAVING":False,
               "BUILD_CUDA":False,
               "BUILD_DEBUG_RESOURCES":False,
               "BUILD_HDF4":False,
               "BUILD_OPENMP":False,
               "BUILD_SILO":False,
               "BUILD_ZFP":True,
               "BUILD_SWIG_PYTHON":True,
               "BUILD_SWIG_JAVA":False
}
visusPlatformBoolOpts["linux"]={"FAST_BUILD":False,
               "BUILD_ANNOTATION":True,
               "BUILD_BRIAN_PAINT_AND_CLICK":False,
               "BUILD_DAVIDAPP":False,
               "BUILD_GUITEST":True,
               "BUILD_LIC":True,
               "BUILD_LIDAR":False,             #laslib doesn't build on linux
               "BUILD_MERGE_PIDX":True,
               "BUILD_MODVISUS":True,
               "BUILD_MSC":True,
               "BUILD_OLD_VISUSIO":True,
               "BUILD_PLUGIN":False,
               "BUILD_SELFTEST":True,
               "BUILD_SIMPLEIO":True,
               "BUILD_TERRAIN":True,
               "BUILD_VISOAR":True,
               "BUILD_VISUSCONVERT":True,
               "BUILD_VISUSSERVER":True,
               "BUILD_VISUSVIEWER":True,
               "BUILD_WEAVING":True,
               "BUILD_CUDA":False,
               "BUILD_DEBUG_RESOURCES":False,
               "BUILD_HDF4":True,
               "BUILD_OPENMP":True,
               "BUILD_SILO":True,
               "BUILD_ZFP":True,
               "BUILD_SWIG_PYTHON":True,
               "BUILD_SWIG_JAVA":False
}
visusPlatformBoolOpts["ios"]={"FAST_BUILD":False,
               "BUILD_ANNOTATION":True,
               "BUILD_BRIAN_PAINT_AND_CLICK":False,
               "BUILD_DAVIDAPP":True,
               "BUILD_GUITEST":True,
               "BUILD_LIC":True,
               "BUILD_LIDAR":False,
               "BUILD_MERGE_PIDX":True,
               "BUILD_MODVISUS":False,
               "BUILD_MSC":True,
               "BUILD_OLD_VISUSIO":True,
               "BUILD_PLUGIN":False,
               "BUILD_SELFTEST":True,
               "BUILD_SIMPLEIO":True,
               "BUILD_TERRAIN":True,
               "BUILD_VISOAR":True,
               "BUILD_VISUSCONVERT":True,
               "BUILD_VISUSSERVER":True,
               "BUILD_VISUSVIEWER":True,
               "BUILD_WEAVING":False,
               "BUILD_CUDA":False,
               "BUILD_DEBUG_RESOURCES":False,
               "BUILD_HDF4":False,
               "BUILD_OPENMP":False,
               "BUILD_SILO":False,
               "BUILD_ZFP":True,
               "BUILD_SWIG_PYTHON":False,
               "BUILD_SWIG_JAVA":False
}

c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(
        name="visus-scheduler",
        change_filter=filter.ChangeFilter(project='visus',branch=['master','develop','tutorial','microscopy']),
        treeStableTimer=300,
        fileIsImportant=isImportant,
        builderNames=builderNames,
        ))

c['schedulers'].append(ForceScheduler(
        name="force",
        builderNames=builderNames,
        properties=visusForceSchedulerOpts
        ))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
# Note: buildbot doesn't seem to handle anything but very simple commands, so most commands are scripts.

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand

factories={}
for name in builderNames:
    factories[name]=BuildFactory()

# check out the source
from buildbot.steps.source.git import Git
from buildbot.process.properties import Interpolate
repo_url=Interpolate('%(src::repository:~' + visus_url +')s')
visus_git_co=Git(repourl=repo_url,
                 mode='full',      
                 method='clobber',
                 #mode='incremental',
                 shallow=True,
                 progress=True,
                 clobberOnFailure=True,
                 haltOnFailure=True)
visus_git_co_windows=Git(repourl=repo_url,
                 mode='full',      
                 method='fresh',
                 progress=True,
                 clobberOnFailure=True,
                 haltOnFailure=True)
# the full/clobber method is really slow on windows, so use a different visit_git_co for that platform (todo)
for name in builderNames:
    if name.startswith("visus-win"):
        factories[name].addStep(visus_git_co_windows)
    else:
        factories[name].addStep(visus_git_co)

def addFactoryStep(factory,cmd,env,desc):
    factory.addStep(ShellCommand(command=cmd,haltOnFailure=True,description=desc,env=env,descriptionDone=desc))

#parameters must be strings, so "interpolate" ints and bools
forceOpts={name:Interpolate('%s',Property(name)) for name in visusAllOpts}
#print forceOpts

#test_time=Interpolate('%s',Property("Testing Time (in seconds)"))
#swig_java=Interpolate('%s',Property("swig_java"))
#swig_python=Interpolate('%s',Property("swig_python"))

from buildbot.config import BuilderConfig
c['builders'] = []

for builder in builderNames:
    opts=builderOpts[builder]
    if not opts["enabled"]:
        continue;

    builderForceOpts=dict(forceOpts)
    builderForceOpts["PLATFORM"]=opts["platform"]
    builderForceOpts["REN2D"]=opts["ren2d"]
    builderForceOpts["REN3D"]=opts["ren3d"]
    builderForceOpts["BITNESS"]=str(opts["bitness"])
    for k,v in visusPlatformBoolOpts[opts["platform"]].iteritems():
        if builderForceOpts[k]==None:
            builderForceOpts[k]=v

    shell=["bash"]
    if opts["platform"]=="win":
        shell=["cmd","/c",".\\buildbot\\win_cmd.bat"]
        builderForceOpts["HOME"]="/c/Users/buildbot"

    for step in buildSteps:
        addFactoryStep(factories[builder],cmd=shell+opts["commands"][step],env=builderForceOpts,desc=step)

    # Set Factories for Builders
    c['builders'].append(BuilderConfig(name=builder,slavenames=opts["builders"],factory=factories[builder]))



######### MailNotification
from buildbot.status.mail import MailNotifier
from buildbot.status.builder import Results
import slack

def messageFormatter(mode, name, build, results, master_status):
    result = Results[results]

    text = list()
    text.append("STATUS: %s" % result.title())
    return {
        'body' : "\n".join(text),
        'type' : 'plain'
    }

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz,auth

authz_cfg=authz.Authz(
    auth=auth.BasicAuth([("visus","pizza")]),
    gracefulShutdown = 'auth',
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

c['status'].append(MailNotifier(fromaddr="visusbuildbot@gmail.com",
                                sendToInterestedUsers=True,
                                extraRecipients=['visusbuilds@sci.utah.edu'],
                                subject='ViSUS Buildbot Failure',
                                relayhost="mail.sci.utah.edu",
                                mode='failing'
                                ))

c['status'].append(slack.SlackStatusPush(weburl='https://hooks.slack.com/services/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',notify_on_success=False))

# c['status'].append(MailNotifier(fromaddr="visusbuildbot@gmail.com",
#                                 sendToInterestedUsers=True,
#                                 extraRecipients=['cam@sci.utah.edu','mliu@sci.utah.edu'],
#                                 subject='ViSUS Buildbot Status (ALL MESSAGES)',
#                                 buildSetSummary=True,
#                                 relayhost="mail.sci.utah.edu",
#                                 ))


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ViSUS"
c['titleURL'] = "http://atlanta.sci.utah.edu"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://atlanta.sci.utah.edu:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

####### OTHER

c['buildHorizon'] = 8
c['logHorizon'] = 8
c['logCompressionLimit'] = 1024*1024
c['logCompressionMethod'] = 'bz2'
c['logMaxSize'] = 1024*1024*32 # 32 Megabytes
